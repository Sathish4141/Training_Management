

Training Management Project  : 
======== ==========  =========

This README provides an overview of the "Training Management" project, explaining its purpose, structure, and usage.

Project Overview:
==================
The "Training Management" project focuses on managing training courses and student information. It involves two main tables: course and student, with the ability to perform CRUD operations on both tables. The project uses foreign keys to establish a relationship between the course and student tables, allowing students to be associated with specific courses.

Table Structure:
================
Course Table:
*************
course id    : Unique identifier for each course.
course name  : Name of the course.
trainer name : Name of the course trainer.
fees         : Course fees.
timing       : Timing of the course.

Student Table:
*************
student id    : Unique identifier for each student.
student name  : Name of the student.
father name   : Name of the student father
course_id     : Foreign key referencing the id of the associated course.
contact       : Contact details of the student.
email         : Email address of the student.


API Endpoints:
=============
The project offers endpoints to perform various operations using Postman:

GET /'course_deatils_get/': Retrieve a list of all available courses.

GET /'course_deatils_get_one/<int:cid> : Retrieve details of a specific course by ID.

POST /'course_create/': Create a new course by providing course details.

PUT /'course_update/<int:cid>'/: Update course details by ID.

DELETE 'course_delete/<int:cid>': Delete a course by ID.

GET /'student_get/': Retrieve a list of all enrolled students.

GET /'student_get/<int:sid>: Retrieve details of a specific student by ID.

POST /student_create/: Enroll a new student by providing student details and course ID.

PUT /'update_student/<int:sid>: Update student details by ID.

DELETE "delete_student/<int:sid>": Remove a student from enrollment by ID.

Getting Started
To run the project locally, follow these steps:

Clone the repository: git clone <repository_url>
Install any required dependencies.
Set up the database and execute migrations.
Run the application.
Usage
Use the provided endpoints in Postman to perform CRUD operations on courses and students.
Provide required data in the request bodies, query parameters, or paths.
Ensure that foreign key references are accurate when enrolling students in courses.